<?php
/**
 * ZLayer Extension
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://framework.zend.com/license/new-bsd
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@zend.com so we can send you a copy immediately.
 *
 * @category   ZLayer
 * @package    ZLayer_View
 * @subpackage Zend_View_Helper
 * @author  Wagner Rodrigues (wagner.rodrigues at gmail dot com)
 * 			   JoÃ£o Paulo Faria (jpfaria at gmail dot com)
 * @license    http://framework.zend.com/license/new-bsd New BSD License
 */

/** Zend_View_Helper */
require_once 'Zend/View/Helper/Abstract.php';

/**
 * Helper for showing message generated by ZLayer_Controller_Action_Messenger
 *
 * @package    Zend_View
 * @subpackage Helper
 * @author  Wagner Rodrigues (wagner.rodrigues at gmail dot com)
 * 			   JoÃ£o Paulo Faria (jpfaria at gmail dot com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */
class ZLayer_View_Helper_Messenger extends Zend_View_Helper_Abstract
{

	/**
	 * Callback
	 * 
	 * @return ZLayer_View_Helper_Messenger
	 */
	public function messenger(){
		return $this;
	}

	/**
	 * 
	 * Return all registered errors messages
	 * @return array|null
	 */
	public function errors(){
    	return $this->_getMessages(ZLayer_Controller_Action_Helper_Messenger::ERROR);
    }

	/**
	 * 
	 * Return registered error message by key
     * @param string $key
	 * @return array|null
	 */
	public function error($key){
    	return $this->_getMessage($key,ZLayer_Controller_Action_Helper_Messenger::ERROR);
    }

	/**
	 * 
	 * Return all registered success messages
	 * @return array|null
	 */
	public function successes(){
    	return $this->_getMessages(ZLayer_Controller_Action_Helper_Messenger::SUCCESS);
    }

	/**
	 * 
	 * Return registered success message by key
     * @param string $key
	 * @return array|null
	 */
	public function success($key){
    	return $this->_getMessage($key,ZLayer_Controller_Action_Helper_Messenger::ERROR);
    }

    /**
	 * 
	 * Return all registered warnings messages
	 * @return array|null
	 */
	public function warnings(){
		return $this->_getMessages(ZLayer_Controller_Action_Helper_Messenger::WARNING);
    }

	/**
	 * 
	 * Return registered warning message by key
     * @param string $key
	 * @return array|null
	 */
	public function warning($key){
    	return $this->_getMessage($key,ZLayer_Controller_Action_Helper_Messenger::WARNING);
    }

	/**
	 * 
	 * Return all registered notices messages
	 * @return array|null
	 */
	public function notices(){
    	return $this->_getMessages(ZLayer_Controller_Action_Helper_Messenger::NOTICE);
    }
    
	/**
	 * 
	 * Return registered notice message by key
     * @param string $key
	 * @return array|null
	 */
	public function notice($key){
    	return $this->_getMessage($key, ZLayer_Controller_Action_Helper_Messenger::NOTICE);
    }

    /**
     *
     * Return registred messages by type
     * @return array|null
     */
    public function getMessages(){
    	
    	$messenger = Zend_Controller_Action_HelperBroker::getStaticHelper('FlashMessenger');
    	$class = get_class($messenger);
    	$refl = new ReflectionClass($class);
    	$messages = array();
    	foreach($refl->getConstants() as $const => $value ) {
    		$messenger->setNameSpace($value);
    		
    		if ($messenger->hasCurrentMessages()) {
    			$messages[$value] = $messenger->getCurrentMessages();
    		} else if ($messenger->hasMessages()) {
    		    $messages[$value] = $messenger->getMessages();
    		}
    	}
    	if (count($messages)>0) {
    		return $messages;
    	}
    	
    	return null;
    }

    /**
     * 
     * Return registred message by key and type
     * @param string $key
     * @param string $type
     * @return array|null
     */
    private function _getMessage($key,$type){
    	$messenger = Zend_Controller_Action_HelperBroker::getStaticHelper('FlashMessenger');
    	$messenger->setNameSpace($type);
    	$messages = array();
    	
	    if ($messenger->hasCurrentMessages()) {
			$messages = $messenger->getCurrentMessages();
		} else if ($messenger->hasMessages()) {
		    $messages = $messenger->getMessages();
		}
    	if (isset($messages[$key]))
    		return $messages[$key];
    	
    	return null;
    }

    /**
     * 
     * Return registred messages by type
     * @param string $type
     * @return array|null
     */
 	private function _getMessages($type){
 		$messenger = Zend_Controller_Action_HelperBroker::getStaticHelper('FlashMessenger');
 		$messenger->setNameSpace($type);
 		$messages = array();
 	    if ($messenger->hasCurrentMessages()) {
			$messages = $messenger->getCurrentMessages();
		} else if ($messenger->hasMessages()) {
		    $messages = $messenger->getMessages();
		}
    	if (count($messages)>0)
    		return $messages;
    	
 		return null;
    }
    
    

}